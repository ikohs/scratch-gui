const ArgumentType = require('../../extension-support/argument-type');
const BlockType = require('../../extension-support/block-type');


class Scratch3Hello{
    constructor (runtime) {
        /**
         * The runtime instantiating this block package.
         * @type {Runtime}
         */
         this.runtime = runtime;
 
         this.video = document.createElement('video');
         this.video.width = 480;
         this.video.height = 360;
         this.video.autoplay = false;
         this.video.style.display = 'none';

         this.progressAreadiv = document.createElement('div');
         this.progressAreadiv.id = 'progress-file-upload-audio';         

         this.interval = 1000;
         this.minInterval = 100;

         this.blockClickedAt = null;         


         window.AudioContext = window.AudioContext || window.webkitAudioContext;
         this.audioContext = new AudioContext();
         this.uploadContext = new AudioContext();
         this.source = null;
         this.arrayBuffer = null;
         this.mvol = 0;
         

         this.volume = 0;
         this.analyser = this.audioContext.createAnalyser();

        

         const media = navigator.mediaDevices.getUserMedia({
             video: true,
             audio: true
         });
 
         media.then(stream => {
             this.video.srcObject = stream;
             this.mediaStreamSource = this.audioContext.createMediaStreamSource(stream);
             this.mediaStreamSource.connect(this.analyser);
             this.frequencies = new Uint8Array(this.analyser.frequencyBinCount);
         });

         

    }
    getInfo() {

        return {
            id: 'hello',
            name: 'Hello',
            blocks: [
                {
                    opcode: 'getAudioLevel',
                    text: 'マイク音量',
                    blockType: BlockType.REPORTER
                },

                {
                    opcode: 'getMusicLevel',
                    text: '音声音量',
                    blockType: BlockType.REPORTER
                },

                {
                    opcode: 'upload',
                    text: '音声アップロード',
                    blockType: BlockType.COMMAND
                },
                {
                    opcode: 'play',
                    text: '再生',
                    blockType: BlockType.COMMAND
                },
            ]
        };
    }

    getAudioLevel (args) {
        this.analyser.getByteFrequencyData(this.frequencies);
        this.volume = this.frequencies.reduce(function(previous, current){
            return previous + current;
        }) / this.analyser.frequencyBinCount;
        return Math.floor(this.volume);
    }

    getMusicLevel (args) {
        this.uploadContext.manalyser.getByteFrequencyData(this.uploadContext.frequencies);
        this.mvol = this.uploadContext.frequencies.reduce(function(previous, current){
            return previous + current;
        }) / this.uploadContext.manalyser.frequencyBinCount;
        return Math.floor(this.mvol);
    }

    upload() {
        if (this.actionRepeated()) { return };
        let width = 480;
        let height = 200;
        let left = window.innerWidth / 2;
        let top = window.innerHeight / 2;
        let x = left - (width / 2);
        let y = top - (height / 2);
        uploadWindow = window.open('', null, 'top=' + y + ',left=' + x + ',width=' + width + ',height=' + height);
        uploadWindow.document.open();
        uploadWindow.document.write('<html><head><title>' + '音声データアップロード' + '</title></head><body>');
        uploadWindow.document.write('<p>' + '音声をアップロード(音ブロックでは使えません．)' + '</p>');
        uploadWindow.document.write('<input type="file" id="upload-files">');
        uploadWindow.document.write('<input type="button" value="' + 'アップロード' + '" id="upload-button">');
        uploadWindow.document.write('</body></html>');
        uploadWindow.document.close();
    
        uploadWindow.document.getElementById("upload-button").onclick = () =>{
          this.uploadButtonClicked(uploadWindow);
        }
    }


    play() {
        this.startAudio(this.arrayBuffer, window);
    }

    actionRepeated() {
        let currentTime = Date.now();
        if (this.blockClickedAt && (this.blockClickedAt + 250) > currentTime) {
          console.log('Please do not repeat trigerring this block.');
          this.blockClickedAt = currentTime;
          return true;
        } else {
          this.blockClickedAt = currentTime;
          return false;
        }
      }
    
    uploadButtonClicked(uploadWindow) {
        let files = uploadWindow.document.getElementById('upload-files').files;

        for (let i = 0; i < files.length; i++) {
            console.log(files[i]);　// 1つ1つのファイルデータはfiles[i]で取得できる
        }

        var uploader     = this;
        var progressArea = document.getElementById('progress-file-upload-audio');

        // Get the instance of File (extends Blob)
        // var file = files.target.files[0];
        var file = files[0];

        // if (!(files[0] instanceof Object)) {
        //     uploadWindow.alert('Please upload file.');
        // } else if (file.type.indexOf('audio') === -1) {
        //     uploadWindow.alert('Please upload audio file.');
        if (file.type.indexOf('audio') === -1) {
            uploadWindow.alert('Please upload audio file.');

        } else {
            // Create the instance of FileReader
            var reader = new FileReader();

            reader.onprogress = function(event) {
                if (event.lengthComputable && (event.total > 0)) {
                    var rate = Math.floor((event.loaded / event.total) * 100);
                    progressArea.textContent = rate + ' %';
                }
            };

            reader.onerror = function() {
                uploadWindow.alert('FileReader Error : Error code is ' + reader.error.code);
                uploader.value = '';
            };

            reader.onload = (e) => {
                this.arrayBuffer = reader.result;  // Get ArrayBuffer
                console.log('uploaded!');
                // this.startAudio(arrayBuffer, uploadWindow);
                uploader.value           = '';
                progressArea.textContent = file.name;
            };

            // Read the instance of File
            reader.readAsArrayBuffer(file);
        }        

        reader.onloadend = (e) => {
            uploadWindow.document.getElementById('upload-files').value = "";
        }

        uploadWindow.close();
    }

    startAudio(arrayBuffer, uploadWindow) {
 
        // The 2nd argument for decodeAudioData
        // console.log(this);

        // Create the instance of AudioBuffer (Asynchronously)
        this.uploadContext.decodeAudioData(arrayBuffer, this.successCallback, this.errorCallback);
    }

    successCallback (audioBuffer) {
        // The 1st argument (audioBuffer) is the instance of AudioBuffer

        // If there is previous AudioBufferSourceNode, program stops previous audio
        if ((this.source instanceof AudioBufferSourceNode) && (this.source.buffer instanceof AudioBuffer)) {
            // Execute onended event handler
            trigger();
            this.source = null;
        }

        console.log(this);

        // uploadWindow.AudioContext = uploadWindow.AudioContext || uploadWindow.webkitAudioContext;
        // this.uploadContext = new AudioContext();

        // Create the instance of AudioBufferSourceNode
        this.manalyser = this.createAnalyser();
        this.frequencies = new Uint8Array(this.manalyser.frequencyBinCount);
        this.source = this.createBufferSource();


        // for legacy browsers
        this.source.start = this.source.start || this.source.noteOn;
        this.source.stop  = this.source.stop  || this.source.noteOff;

        // Set the instance of AudioBuffer
        this.source.buffer = audioBuffer;

        // Set parameters
        // source.playbackRate.value = document.getElementById('range-playback-rate').valueAsNumber;
        // source.loop               = document.querySelector('[type="checkbox"]').checked;

        this.source.playbackRate.value = 1;

        // AudioBufferSourceNode (Input) -> GainNode (Volume) -> AudioDestinationNode (Output)
        // this.source.connect(gain);
        // gain.connect(this.uploadContext.destination);
        this.source.connect(this.manalyser);
        this.source.connect(this.destination);

        // Start audio
        this.source.start(0);

        // Set Callback
        this.source.onended = (event) => {
            // Remove event handler
            this.source.onended     = null;
            document.onkeydown = null;

            // Stop audio
            this.source.stop(0);

            console.log('STOP by "on' + event.type + '" event handler !!');

            // Audio is not started !!
            // It is necessary to create the instance of AudioBufferSourceNode again

            // Cannot replay
            // source.start(0);
        };

        // Stop audio
        document.onkeydown = function(event) {
            // Space ?
            if (event.keyCode !== 32) {
                return;
            }

            // Execute onended event handler
            trigger();

            return false;
        };
        console.log(this);

    }

    // The 3rd argument for decodeAudioData
    errorCallback(error) {
        if (error instanceof Error) {
            this.uploadWindow.alert(error.message);
        } else {
            this.uploadWindow.alert('Error : "decodeAudioData" method.');
        }
    }
    



}

module.exports = Scratch3Hello;